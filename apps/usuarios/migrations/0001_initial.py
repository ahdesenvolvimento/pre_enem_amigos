# Generated by Django 3.2.10 on 2022-03-24 13:37

import apps.usuarios.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255)),
                ('status', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'usuario',
            },
            managers=[
                ('objects', apps.usuarios.models.BaseManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('cor', models.CharField(max_length=255, verbose_name='Cor')),
            ],
            options={
                'db_table': 'cor',
            },
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('disciplina', models.CharField(max_length=255, verbose_name='Disciplina')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descricao')),
            ],
            options={
                'db_table': 'disciplina',
            },
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('genero', models.CharField(max_length=255, verbose_name='Gênero')),
            ],
            options={
                'db_table': 'genero',
            },
        ),
        migrations.CreateModel(
            name='Graduacao',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('graduacao', models.CharField(max_length=255, verbose_name='Graduação')),
            ],
            options={
                'db_table': 'graduacao',
            },
        ),
        migrations.CreateModel(
            name='Pessoa',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('nome_oficial', models.CharField(max_length=255, verbose_name='Nome oficial')),
                ('nome_social', models.CharField(max_length=255, verbose_name='Nome social')),
                ('data_nasc', models.DateField(verbose_name='Data de nascimento')),
                ('cpf', models.CharField(max_length=14, unique=True, verbose_name='CPF')),
                ('cep', models.CharField(max_length=10, verbose_name='CEP')),
                ('endereco', models.CharField(max_length=255, verbose_name='Endereco')),
                ('numero', models.IntegerField(verbose_name='Número')),
                ('bairro', models.CharField(max_length=255, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=255, verbose_name='Cidade')),
                ('estado', models.CharField(max_length=255, verbose_name='Estado')),
                ('observacoes', models.TextField(verbose_name='Observacoes')),
                ('id_cor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='usuarios.cor')),
                ('id_genero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.genero')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pessoa',
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('eh_adm', models.BooleanField(default=False, verbose_name='É professor administrador?')),
                ('telefone', models.CharField(blank=True, max_length=11, null=True, verbose_name='Telefone')),
                ('eh_wpp', models.BooleanField(default=False, verbose_name='É whatsapp?')),
                ('horario_inicio_disp', models.TimeField(blank=True, null=True, verbose_name='Horário de disponibilidade')),
                ('horario_fim_disp', models.TimeField(blank=True, null=True, verbose_name='Horário de termino da disponibilidade')),
                ('id_graduacao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.graduacao')),
                ('id_pessoa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.pessoa')),
            ],
            options={
                'db_table': 'professor',
            },
        ),
        migrations.CreateModel(
            name='ProfessorDisciplina',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('id_disciplina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.disciplina')),
                ('id_professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.professor')),
            ],
            options={
                'db_table': 'prof_disciplina',
            },
        ),
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('criado', models.DateTimeField(auto_now_add=True)),
                ('id_pessoa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuarios.pessoa')),
            ],
            options={
                'db_table': 'aluno',
            },
        ),
    ]
